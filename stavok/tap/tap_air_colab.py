# -*- coding: utf-8 -*-
"""Tap_air.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R35i4XzM6fsWzKId3MwyAvUpON85Pc3G

### HeatMap Tap stream example
 
**Description**: A linked streams example demonstrating how use Tap stream 
on a HeatMap. The data contains aerosol (PM) concentration every 30 min
for 4 sensors and for 2 PM size ranges - 2.5 and 10 µm. Data is taken from
the [AirZOOM project](https://bit.ly/3ExKKm3) and covers the period of the
forest fires in the Chornobyl exclusion zone.
 
The HeatMap represents the mean PM concentration per day. On tap the 
HeatMap on the right will generate a curve of the PM concentration for each 
day in the selected day and sensor.

- **Ref src**: http://holoviews.org/reference/streams/bokeh/Tap.html
- **Ref github**: https://bit.ly/3doHjSF

The address of this notebook at Colab is as follows:

- https://colab.research.google.com/drive/1R35i4XzM6fsWzKId3MwyAvUpON85Pc3G?usp=sharing#scrollTo=584417ee-afc1-4171-acc1-7fd6b6ed5eef

To install necessary libraries  run the following at the local computer:

```
    > conda install -c pyviz holoviz
```

or in *colab*:

```python
    !pip install holoviz
```
"""

!pip install holoviz

"""### Import modules"""

import panel as pn
import numpy as np
import holoviews as hv
from holoviews import opts

"""### Resolve holoview rendering issue in Colab
According to hints:

- https://stackoverflow.com/a/55514087
- https://stackoverflow.com/a/55507337

do the following:

```python
import os, holoviews as hv
os.environ['HV_DOC_HTML'] = 'true'
```

or 

```python
%env HV_DOC_HTML=true
```

Then for every single cell with a plot in it you have to re-load the JS:

```python
hv.extension('bokeh')
# An example
hv.Curve([1, 2, 3])
```

### Set beckend
"""

hv.extension('bokeh', width=90)

"""### Read monitoring data

This block is to be substituted by DB interface 
"""

import pandas as pd
from datetime import datetime

def read_data():
    data_file = 'https://raw.githubusercontent.com/protw/airscape/master/' + \
                'data/200421%20Chronograf%20Data.csv'
    df = pd.read_csv(data_file)
    df.time = [datetime.strptime(x[0:19],'%Y-%m-%dT%H:%M:%S') for x in df.time]
    df['dayhour'] = [x.hour for x in df.time]
    df['weekday'] = [x.weekday() for x in df.time]
    df['monthday']= [x.day for x in df.time]
    df['yearday'] = [x.timetuple().tm_yday for x in df.time]
    df['yearweek']= [x.isocalendar()[1] for x in df.time] 
    df['month']   = [x.month for x in df.time] 
    df['year']    = [x.year for x in df.time]
    df.sensor_id  = [str(x) for x in df.sensor_id]
    return df

df = read_data()

df

"""### Declare dataset"""

dataset = hv.Dataset(df, 
                     kdims=[('sensor_id','Sensor #'),
                            ('yearday','Day of a year'),
                            ('dayhour','Hour of a day'),
                            ('factor','Pollution factor')],
                     vdims=('val','Concentration, µg/m3'))

"""### Data descriptive stats"""

xmin = df.yearday.min()
xmax = df.yearday.max()
ymin = df.sensor_id.min()
factors = df.factor.unique()
factor = factors[0] # Later this will be substituted by UI

"""### Declare two plots"""

hv.extension('bokeh')
## Declare HeatMap
heatmap = hv.HeatMap(dataset.aggregate(['yearday', 'sensor_id'], np.mean),
      label=f'Avg Daily {factor} Concentration').select(yearday=(xmin, xmax))

## Declare Tap stream with heatmap as source and initial values
posxy = hv.streams.Tap(source=heatmap, x=xmin, y=ymin)

## Define function to compute histogram based on tap location
def tap_histogram(x, y):
    return hv.Curve(dataset.select(sensor_id=y, yearday=int(x), factor=factor), 
                    kdims='dayhour', label=f'Day of year: {int(x)}, Sensor: {y}')

## Connect the Tap stream to the tap_histogram callback
tap_dmap = hv.DynamicMap(tap_histogram, streams=[posxy])

## Get the range of the aggregated data we're using for plotting
cmin, cmax = dataset.aggregate(['yearday', 'sensor_id'], np.mean).range(dim='val')

"""### Display the Heatmap and Curve side by side

This code displays plots directly in this notebook.
"""

hv.extension('bokeh')
heatmap_tap_dmap = heatmap + tap_dmap
(heatmap_tap_dmap).opts(
    opts.Curve(framewise=True, height=500, line_color='black', width=375, 
               yaxis='right'),
    opts.HeatMap(clim=(cmin, cmax), cmap='RdBu_r', fontsize={'xticks': '6pt'}, 
             height=500, logz=True, tools=['hover'], width=700, xrotation=90))

"""### Displaying at the local computer

Rendering plot in Spyder at the local computer using [the hint from](https://stackoverflow.com/a/57971346):

```python
import panel as pn

bokeh_server = pn.Row(heatmap_tap_dmap).show(port=12346)
```

In order to stop server if necessary run the following command in Python:

```python
bokeh_server.stop()
```

 ### To launch as a server

    > panel serve Tap_air.py

 After that you'll be asked to go to the browser and launch the app from 
 the web-address bar:

    http://localhost:5006/Tap_air
"""